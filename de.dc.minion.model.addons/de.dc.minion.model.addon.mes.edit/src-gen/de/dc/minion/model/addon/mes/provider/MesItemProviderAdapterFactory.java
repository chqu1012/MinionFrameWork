/**
 */
package de.dc.minion.model.addon.mes.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITableItemLabelProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import de.dc.minion.model.addon.mes.util.MesAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MesItemProviderAdapterFactory extends MesAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MesItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
		supportedTypes.add(ITableItemLabelProvider.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.mes.Mes} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MesItemProvider mesItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.mes.Mes}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMesAdapter() {
		if (mesItemProvider == null) {
			mesItemProvider = new MesItemProvider(this);
		}

		return mesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.mes.ApplicationList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ApplicationListItemProvider applicationListItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.mes.ApplicationList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createApplicationListAdapter() {
		if (applicationListItemProvider == null) {
			applicationListItemProvider = new ApplicationListItemProvider(this);
		}

		return applicationListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.mes.AccessPrivilegeList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AccessPrivilegeListItemProvider accessPrivilegeListItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.mes.AccessPrivilegeList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAccessPrivilegeListAdapter() {
		if (accessPrivilegeListItemProvider == null) {
			accessPrivilegeListItemProvider = new AccessPrivilegeListItemProvider(this);
		}

		return accessPrivilegeListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.mes.FilterList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FilterListItemProvider filterListItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.mes.FilterList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFilterListAdapter() {
		if (filterListItemProvider == null) {
			filterListItemProvider = new FilterListItemProvider(this);
		}

		return filterListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.mes.TaskList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskListItemProvider taskListItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.mes.TaskList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskListAdapter() {
		if (taskListItemProvider == null) {
			taskListItemProvider = new TaskListItemProvider(this);
		}

		return taskListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.mes.FormList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FormListItemProvider formListItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.mes.FormList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFormListAdapter() {
		if (formListItemProvider == null) {
			formListItemProvider = new FormListItemProvider(this);
		}

		return formListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.mes.ListList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ListListItemProvider listListItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.mes.ListList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createListListAdapter() {
		if (listListItemProvider == null) {
			listListItemProvider = new ListListItemProvider(this);
		}

		return listListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.mes.ConfigurationList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfigurationListItemProvider configurationListItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.mes.ConfigurationList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfigurationListAdapter() {
		if (configurationListItemProvider == null) {
			configurationListItemProvider = new ConfigurationListItemProvider(this);
		}

		return configurationListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.mes.Application} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ApplicationItemProvider applicationItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.mes.Application}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createApplicationAdapter() {
		if (applicationItemProvider == null) {
			applicationItemProvider = new ApplicationItemProvider(this);
		}

		return applicationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.mes.StatusList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StatusListItemProvider statusListItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.mes.StatusList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStatusListAdapter() {
		if (statusListItemProvider == null) {
			statusListItemProvider = new StatusListItemProvider(this);
		}

		return statusListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.mes.Status} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StatusItemProvider statusItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.mes.Status}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStatusAdapter() {
		if (statusItemProvider == null) {
			statusItemProvider = new StatusItemProvider(this);
		}

		return statusItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.mes.UserList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserListItemProvider userListItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.mes.UserList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserListAdapter() {
		if (userListItemProvider == null) {
			userListItemProvider = new UserListItemProvider(this);
		}

		return userListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.mes.UserGroupList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserGroupListItemProvider userGroupListItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.mes.UserGroupList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserGroupListAdapter() {
		if (userGroupListItemProvider == null) {
			userGroupListItemProvider = new UserGroupListItemProvider(this);
		}

		return userGroupListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.mes.ReportList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReportListItemProvider reportListItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.mes.ReportList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReportListAdapter() {
		if (reportListItemProvider == null) {
			reportListItemProvider = new ReportListItemProvider(this);
		}

		return reportListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.mes.StateModelList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateModelListItemProvider stateModelListItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.mes.StateModelList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateModelListAdapter() {
		if (stateModelListItemProvider == null) {
			stateModelListItemProvider = new StateModelListItemProvider(this);
		}

		return stateModelListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.mes.MesssagesList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MesssagesListItemProvider messsagesListItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.mes.MesssagesList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMesssagesListAdapter() {
		if (messsagesListItemProvider == null) {
			messsagesListItemProvider = new MesssagesListItemProvider(this);
		}

		return messsagesListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.mes.LocaleList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocaleListItemProvider localeListItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.mes.LocaleList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocaleListAdapter() {
		if (localeListItemProvider == null) {
			localeListItemProvider = new LocaleListItemProvider(this);
		}

		return localeListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.mes.DataTableList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataTableListItemProvider dataTableListItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.mes.DataTableList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataTableListAdapter() {
		if (dataTableListItemProvider == null) {
			dataTableListItemProvider = new DataTableListItemProvider(this);
		}

		return dataTableListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.mes.DataTable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataTableItemProvider dataTableItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.mes.DataTable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataTableAdapter() {
		if (dataTableItemProvider == null) {
			dataTableItemProvider = new DataTableItemProvider(this);
		}

		return dataTableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.mes.Column} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColumnItemProvider columnItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.mes.Column}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColumnAdapter() {
		if (columnItemProvider == null) {
			columnItemProvider = new ColumnItemProvider(this);
		}

		return columnItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.mes.Locale} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocaleItemProvider localeItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.mes.Locale}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocaleAdapter() {
		if (localeItemProvider == null) {
			localeItemProvider = new LocaleItemProvider(this);
		}

		return localeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.mes.Messages} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MessagesItemProvider messagesItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.mes.Messages}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMessagesAdapter() {
		if (messagesItemProvider == null) {
			messagesItemProvider = new MessagesItemProvider(this);
		}

		return messagesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.mes.State} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateItemProvider stateItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.mes.State}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateAdapter() {
		if (stateItemProvider == null) {
			stateItemProvider = new StateItemProvider(this);
		}

		return stateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.mes.Report} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReportItemProvider reportItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.mes.Report}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReportAdapter() {
		if (reportItemProvider == null) {
			reportItemProvider = new ReportItemProvider(this);
		}

		return reportItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.mes.StatusItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StatusItemItemProvider statusItemItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.mes.StatusItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStatusItemAdapter() {
		if (statusItemItemProvider == null) {
			statusItemItemProvider = new StatusItemItemProvider(this);
		}

		return statusItemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.mes.UserGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserGroupItemProvider userGroupItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.mes.UserGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserGroupAdapter() {
		if (userGroupItemProvider == null) {
			userGroupItemProvider = new UserGroupItemProvider(this);
		}

		return userGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.mes.User} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserItemProvider userItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.mes.User}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserAdapter() {
		if (userItemProvider == null) {
			userItemProvider = new UserItemProvider(this);
		}

		return userItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.mes.ListItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ListItemItemProvider listItemItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.mes.ListItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createListItemAdapter() {
		if (listItemItemProvider == null) {
			listItemItemProvider = new ListItemItemProvider(this);
		}

		return listItemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.mes.Form} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FormItemProvider formItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.mes.Form}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFormAdapter() {
		if (formItemProvider == null) {
			formItemProvider = new FormItemProvider(this);
		}

		return formItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.mes.Task} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskItemProvider taskItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.mes.Task}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskAdapter() {
		if (taskItemProvider == null) {
			taskItemProvider = new TaskItemProvider(this);
		}

		return taskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.mes.Filter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FilterItemProvider filterItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.mes.Filter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFilterAdapter() {
		if (filterItemProvider == null) {
			filterItemProvider = new FilterItemProvider(this);
		}

		return filterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.mes.AccessPrivilege} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AccessPrivilegeItemProvider accessPrivilegeItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.mes.AccessPrivilege}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAccessPrivilegeAdapter() {
		if (accessPrivilegeItemProvider == null) {
			accessPrivilegeItemProvider = new AccessPrivilegeItemProvider(this);
		}

		return accessPrivilegeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.mes.Property} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyItemProvider propertyItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.mes.Property}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyAdapter() {
		if (propertyItemProvider == null) {
			propertyItemProvider = new PropertyItemProvider(this);
		}

		return propertyItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (mesItemProvider != null)
			mesItemProvider.dispose();
		if (applicationListItemProvider != null)
			applicationListItemProvider.dispose();
		if (accessPrivilegeListItemProvider != null)
			accessPrivilegeListItemProvider.dispose();
		if (filterListItemProvider != null)
			filterListItemProvider.dispose();
		if (taskListItemProvider != null)
			taskListItemProvider.dispose();
		if (formListItemProvider != null)
			formListItemProvider.dispose();
		if (listListItemProvider != null)
			listListItemProvider.dispose();
		if (configurationListItemProvider != null)
			configurationListItemProvider.dispose();
		if (statusListItemProvider != null)
			statusListItemProvider.dispose();
		if (userListItemProvider != null)
			userListItemProvider.dispose();
		if (userGroupListItemProvider != null)
			userGroupListItemProvider.dispose();
		if (reportListItemProvider != null)
			reportListItemProvider.dispose();
		if (stateModelListItemProvider != null)
			stateModelListItemProvider.dispose();
		if (messsagesListItemProvider != null)
			messsagesListItemProvider.dispose();
		if (localeListItemProvider != null)
			localeListItemProvider.dispose();
		if (dataTableListItemProvider != null)
			dataTableListItemProvider.dispose();
		if (statusItemProvider != null)
			statusItemProvider.dispose();
		if (dataTableItemProvider != null)
			dataTableItemProvider.dispose();
		if (columnItemProvider != null)
			columnItemProvider.dispose();
		if (localeItemProvider != null)
			localeItemProvider.dispose();
		if (messagesItemProvider != null)
			messagesItemProvider.dispose();
		if (stateItemProvider != null)
			stateItemProvider.dispose();
		if (reportItemProvider != null)
			reportItemProvider.dispose();
		if (statusItemItemProvider != null)
			statusItemItemProvider.dispose();
		if (userGroupItemProvider != null)
			userGroupItemProvider.dispose();
		if (userItemProvider != null)
			userItemProvider.dispose();
		if (listItemItemProvider != null)
			listItemItemProvider.dispose();
		if (formItemProvider != null)
			formItemProvider.dispose();
		if (taskItemProvider != null)
			taskItemProvider.dispose();
		if (filterItemProvider != null)
			filterItemProvider.dispose();
		if (applicationItemProvider != null)
			applicationItemProvider.dispose();
		if (accessPrivilegeItemProvider != null)
			accessPrivilegeItemProvider.dispose();
		if (propertyItemProvider != null)
			propertyItemProvider.dispose();
	}

}
