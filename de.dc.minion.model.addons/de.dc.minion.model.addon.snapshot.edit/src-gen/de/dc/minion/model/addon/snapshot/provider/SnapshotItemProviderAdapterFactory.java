/**
 */
package de.dc.minion.model.addon.snapshot.provider;

import de.dc.minion.model.addon.snapshot.util.SnapshotAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITableItemLabelProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SnapshotItemProviderAdapterFactory extends SnapshotAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SnapshotItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
		supportedTypes.add(ITableItemLabelProvider.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.snapshot.Snapshot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SnapshotItemProvider snapshotItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.snapshot.Snapshot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSnapshotAdapter() {
		if (snapshotItemProvider == null) {
			snapshotItemProvider = new SnapshotItemProvider(this);
		}

		return snapshotItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.snapshot.Layer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LayerItemProvider layerItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.snapshot.Layer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLayerAdapter() {
		if (layerItemProvider == null) {
			layerItemProvider = new LayerItemProvider(this);
		}

		return layerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.snapshot.BlendEffect} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BlendEffectItemProvider blendEffectItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.snapshot.BlendEffect}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBlendEffectAdapter() {
		if (blendEffectItemProvider == null) {
			blendEffectItemProvider = new BlendEffectItemProvider(this);
		}

		return blendEffectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.snapshot.BloomEffect} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BloomEffectItemProvider bloomEffectItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.snapshot.BloomEffect}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBloomEffectAdapter() {
		if (bloomEffectItemProvider == null) {
			bloomEffectItemProvider = new BloomEffectItemProvider(this);
		}

		return bloomEffectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.snapshot.BoxBlurEffect} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BoxBlurEffectItemProvider boxBlurEffectItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.snapshot.BoxBlurEffect}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBoxBlurEffectAdapter() {
		if (boxBlurEffectItemProvider == null) {
			boxBlurEffectItemProvider = new BoxBlurEffectItemProvider(this);
		}

		return boxBlurEffectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.snapshot.ColorAdjustEffect} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColorAdjustEffectItemProvider colorAdjustEffectItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.snapshot.ColorAdjustEffect}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColorAdjustEffectAdapter() {
		if (colorAdjustEffectItemProvider == null) {
			colorAdjustEffectItemProvider = new ColorAdjustEffectItemProvider(this);
		}

		return colorAdjustEffectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.snapshot.ColorInputEffect} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColorInputEffectItemProvider colorInputEffectItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.snapshot.ColorInputEffect}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColorInputEffectAdapter() {
		if (colorInputEffectItemProvider == null) {
			colorInputEffectItemProvider = new ColorInputEffectItemProvider(this);
		}

		return colorInputEffectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.snapshot.DisplacementMapEffect} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DisplacementMapEffectItemProvider displacementMapEffectItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.snapshot.DisplacementMapEffect}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDisplacementMapEffectAdapter() {
		if (displacementMapEffectItemProvider == null) {
			displacementMapEffectItemProvider = new DisplacementMapEffectItemProvider(this);
		}

		return displacementMapEffectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.snapshot.DropShadowEffect} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DropShadowEffectItemProvider dropShadowEffectItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.snapshot.DropShadowEffect}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDropShadowEffectAdapter() {
		if (dropShadowEffectItemProvider == null) {
			dropShadowEffectItemProvider = new DropShadowEffectItemProvider(this);
		}

		return dropShadowEffectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.snapshot.GaussianBlurEffect} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GaussianBlurEffectItemProvider gaussianBlurEffectItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.snapshot.GaussianBlurEffect}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGaussianBlurEffectAdapter() {
		if (gaussianBlurEffectItemProvider == null) {
			gaussianBlurEffectItemProvider = new GaussianBlurEffectItemProvider(this);
		}

		return gaussianBlurEffectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.snapshot.GlowEffect} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GlowEffectItemProvider glowEffectItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.snapshot.GlowEffect}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGlowEffectAdapter() {
		if (glowEffectItemProvider == null) {
			glowEffectItemProvider = new GlowEffectItemProvider(this);
		}

		return glowEffectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.snapshot.InnerShadowEffect} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InnerShadowEffectItemProvider innerShadowEffectItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.snapshot.InnerShadowEffect}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInnerShadowEffectAdapter() {
		if (innerShadowEffectItemProvider == null) {
			innerShadowEffectItemProvider = new InnerShadowEffectItemProvider(this);
		}

		return innerShadowEffectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.snapshot.LightingEffect} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LightingEffectItemProvider lightingEffectItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.snapshot.LightingEffect}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLightingEffectAdapter() {
		if (lightingEffectItemProvider == null) {
			lightingEffectItemProvider = new LightingEffectItemProvider(this);
		}

		return lightingEffectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.snapshot.MotionBlurEffect} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MotionBlurEffectItemProvider motionBlurEffectItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.snapshot.MotionBlurEffect}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMotionBlurEffectAdapter() {
		if (motionBlurEffectItemProvider == null) {
			motionBlurEffectItemProvider = new MotionBlurEffectItemProvider(this);
		}

		return motionBlurEffectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.snapshot.PerspectiveTransformEffect} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PerspectiveTransformEffectItemProvider perspectiveTransformEffectItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.snapshot.PerspectiveTransformEffect}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPerspectiveTransformEffectAdapter() {
		if (perspectiveTransformEffectItemProvider == null) {
			perspectiveTransformEffectItemProvider = new PerspectiveTransformEffectItemProvider(this);
		}

		return perspectiveTransformEffectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.snapshot.ReflectionEffect} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReflectionEffectItemProvider reflectionEffectItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.snapshot.ReflectionEffect}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReflectionEffectAdapter() {
		if (reflectionEffectItemProvider == null) {
			reflectionEffectItemProvider = new ReflectionEffectItemProvider(this);
		}

		return reflectionEffectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.snapshot.SepiaToneEffect} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SepiaToneEffectItemProvider sepiaToneEffectItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.snapshot.SepiaToneEffect}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSepiaToneEffectAdapter() {
		if (sepiaToneEffectItemProvider == null) {
			sepiaToneEffectItemProvider = new SepiaToneEffectItemProvider(this);
		}

		return sepiaToneEffectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.snapshot.ShadowEffect} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ShadowEffectItemProvider shadowEffectItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.snapshot.ShadowEffect}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createShadowEffectAdapter() {
		if (shadowEffectItemProvider == null) {
			shadowEffectItemProvider = new ShadowEffectItemProvider(this);
		}

		return shadowEffectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link de.dc.minion.model.addon.snapshot.ColorGrading} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColorGradingItemProvider colorGradingItemProvider;

	/**
	 * This creates an adapter for a {@link de.dc.minion.model.addon.snapshot.ColorGrading}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColorGradingAdapter() {
		if (colorGradingItemProvider == null) {
			colorGradingItemProvider = new ColorGradingItemProvider(this);
		}

		return colorGradingItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (snapshotItemProvider != null)
			snapshotItemProvider.dispose();
		if (layerItemProvider != null)
			layerItemProvider.dispose();
		if (blendEffectItemProvider != null)
			blendEffectItemProvider.dispose();
		if (bloomEffectItemProvider != null)
			bloomEffectItemProvider.dispose();
		if (boxBlurEffectItemProvider != null)
			boxBlurEffectItemProvider.dispose();
		if (colorAdjustEffectItemProvider != null)
			colorAdjustEffectItemProvider.dispose();
		if (colorInputEffectItemProvider != null)
			colorInputEffectItemProvider.dispose();
		if (displacementMapEffectItemProvider != null)
			displacementMapEffectItemProvider.dispose();
		if (dropShadowEffectItemProvider != null)
			dropShadowEffectItemProvider.dispose();
		if (gaussianBlurEffectItemProvider != null)
			gaussianBlurEffectItemProvider.dispose();
		if (glowEffectItemProvider != null)
			glowEffectItemProvider.dispose();
		if (innerShadowEffectItemProvider != null)
			innerShadowEffectItemProvider.dispose();
		if (lightingEffectItemProvider != null)
			lightingEffectItemProvider.dispose();
		if (motionBlurEffectItemProvider != null)
			motionBlurEffectItemProvider.dispose();
		if (perspectiveTransformEffectItemProvider != null)
			perspectiveTransformEffectItemProvider.dispose();
		if (reflectionEffectItemProvider != null)
			reflectionEffectItemProvider.dispose();
		if (sepiaToneEffectItemProvider != null)
			sepiaToneEffectItemProvider.dispose();
		if (shadowEffectItemProvider != null)
			shadowEffectItemProvider.dispose();
		if (colorGradingItemProvider != null)
			colorGradingItemProvider.dispose();
	}

}
